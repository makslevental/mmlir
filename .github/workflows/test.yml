name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main
  schedule:
    # At minute 0 past hour 6. (see https://crontab.guru)
    - cron: '00 06 * * *'

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit).
  group: ci-build-test-${{ github.event.number || github.sha }}
  cancel-in-progress: true

env:
  # this actually turns build isolation on!
  # pip flags -> env variables conversion is weird...
  PIP_NO_BUILD_ISOLATION: false

jobs:

  test:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, ubuntu-22.04-arm, macos-13, macos-14, macos-15 ]
        py_version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

        exclude:
          - os: macos-13
            py_version: "3.8"

          - os: macos-13
            py_version: "3.9"

          - os: macos-14
            py_version: "3.8"

          - os: macos-14
            py_version: "3.9"

          - os: macos-15
            py_version: "3.8"

          - os: macos-15
            py_version: "3.9"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
        with:
          version: '1.12.1'

      - name: set ENV macos
        if: contains(matrix.OS, 'macos')
        shell: bash
        run: |
          # error: 'value' is unavailable: introduced in macOS 10.13
          echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" | tee -a $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.py_version }}"
          allow-prereleases: true

      - name: install prereqs
        run: |
          
          pip install -r requirements.txt
          pip install cmake>=3.28 setuptools>=42 wheel
          pip download mlir -f https://makslevental.github.io/wheels
          unzip -q mlir-*.whl
          rm -rf mlir-*.whl
          echo "MLIR_DIR=$PWD/mlir" >> $GITHUB_ENV

      - name: Configure CMake
        run: >-
          cmake -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH=$MLIR_DIR
          -DLLVM_EXTERNAL_LIT=$(which lit)
          -DPython3_EXECUTABLE=$(which python)
          -B build
          -S $PWD

      - name: Build and test with CMake/lit
        run: |
          
          pushd build && ninja check-minimal && popd
          rm -rf build

      - name: Build and test using setup.py
        run: |          

          if [ x"${{ matrix.OS }}" == x"ubuntu-22.04" ]; then
            CIBW_ARCHS=x86_64
          elif [ x"${{ matrix.OS }}" == x"ubuntu-22.04-arm" ]; then
            CIBW_ARCHS=aarch64
          elif [ x"${{ matrix.OS }}" == x"macos-13" ]; then
            CIBW_ARCHS=x86_64
          elif [ x"${{ matrix.OS }}" == x"macos-14" ]; then
            CIBW_ARCHS=arm64
          elif [ x"${{ matrix.OS }}" == x"macos-15" ]; then
            CIBW_ARCHS=arm64
          fi
          export CIBW_ARCHS
          
          pip install cibuildwheel
          CIBW_BUILD=${{ matrix.PY_VERSION }}
          export CIBW_BUILD="cp${CIBW_BUILD//./}-*"
          cibuildwheel --output-dir wheelhouse
          pip install mmlir -f wheelhouse
          pushd test/python && python smoketest.py && popd
