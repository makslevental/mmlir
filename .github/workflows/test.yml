name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main
  schedule:
    # At minute 0 past hour 6. (see https://crontab.guru)
    - cron: '00 06 * * *'

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit).
  group: ci-build-test-${{ github.event.number || github.sha }}
  cancel-in-progress: true

env:
  # this actually turns build isolation on!
  # pip flags -> env variables conversion is weird...
  PIP_NO_BUILD_ISOLATION: false

jobs:

  test:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-12, macos-14, windows-2019 ]
        py_version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

        exclude:
          - os: macos-12
            py_version: "3.8"

          - os: macos-12
            py_version: "3.9"

          - os: macos-14
            py_version: "3.8"

          - os: macos-14
            py_version: "3.9"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ contains(matrix.OS, 'macos') && 'llvm' || 'gcc-13' }}
          vcvarsall: ${{ contains(matrix.OS, 'windows') }} # evaluate to the string 'true'
          msvc: ${{ contains(matrix.OS, 'windows') }}
          choco: ${{ contains(matrix.OS, 'windows') }}
          cmake: true
          ninja: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.py_version }}"
          allow-prereleases: true

      - name: install prereqs
        run: |
          
          pip install -r requirements.txt
          pip download mlir -f https://makslevental.github.io/wheels
          unzip mlir-*.whl
          echo "MLIR_DIR=$PWD/mlir" >> $GITHUB_ENV

      - name: Configure CMake
        if: ${{ !contains(matrix.OS, 'windows') }}
        run: >-
          cmake -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH=$MLIR_DIR
          -DLLVM_EXTERNAL_LIT=$(which lit)
          -DPython3_EXECUTABLE=$(which python)
          -B build
          -S $PWD

      - name: Configure CMake
        if: contains(matrix.OS, 'windows')
        run: >-
          cmake -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_CXX_COMPILER=cl
          -DCMAKE_C_COMPILER=cl
          -DCMAKE_CXX_FLAGS=-MT
          -DCMAKE_C_FLAGS=-MT
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
          -DCMAKE_VISIBILITY_INLINES_HIDDEN=ON
          -DCMAKE_C_VISIBILITY_PRESET=hidden
          -DCMAKE_CXX_VISIBILITY_PRESET=hidden
          -DCMAKE_PREFIX_PATH=$MLIR_DIR
          -DLLVM_EXTERNAL_LIT="$(which lit)"
          -DPython3_EXECUTABLE="$(which python)"
          -B build
          -S $PWD

      - name: Build and test with CMake/lit
        run: |
          
          pushd build && ninja check-minimal && popd

      - name: Build and test using setup.py
        run: |

          if [ x"${{ matrix.OS }}" == x"ubuntu-22.04" ]; then
            CIBW_ARCHS=x86_64
          elif [ x"${{ matrix.OS }}" == x"macos-12" ]; then
            CIBW_ARCHS=x86_64
          elif [ x"${{ matrix.OS }}" == x"macos-12" ]; then
            CIBW_ARCHS=arm64
          elif [ x"${{ matrix.OS }}" == x"windows-2019" ]; then
            CIBW_ARCHS=AMD64
          fi
          export CIBW_ARCHS
          
          pip install cibuildwheel
          CIBW_BUILD=${{ matrix.PY_VERSION }}
          export CIBW_BUILD="cp${CIBW_BUILD//./}-*"
          cibuildwheel --output-dir wheelhouse
          pip install mmlir -f wheelhouse
          pushd test/python && python smoketest.py && popd

  test-aarch64:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        py_version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Test CMake
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          dockerRunArgs: --volume "${{ github.workspace }}:/workspace"
          install: |
            
            apt-get update -q -y
            apt-get install -y wget build-essential python3 \
              python-is-python3 python3-pip cmake ninja-build unzip
        
          run: |
            
            cd /workspace
            pip install -r requirements.txt
            pip download mlir -f https://makslevental.github.io/wheels
            unzip mlir-*.whl
            
            cmake -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH=$PWD/mlir \
              -DLLVM_EXTERNAL_LIT=$(which lit) \
              -DPython3_EXECUTABLE=$(which python) \
              -B build \
              -S $PWD
            
            pushd build && ninja check-minimal && popd

      - name: Test cibuildwheel
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          dockerRunArgs: --volume "${{ github.workspace }}:/workspace"
          install: |
            
            apt-get update -q -y
            apt-get install -y wget build-essential python3 \
              python-is-python3 python3-pip cmake ninja-build unzip
            
          run: |
            
            cd /workspace
            
            pip install cibuildwheel
            pip download mlir -f https://makslevental.github.io/wheels
            unzip mlir-*.whl
            
            CIBW_BUILD=${{ matrix.py_version }}
            export CIBW_BUILD="cp${CIBW_BUILD//./}-*"
            cibuildwheel --output-dir wheelhouse
            pip install mmlir -f wheelhouse
            pushd test/python && python smoketest.py && popd
